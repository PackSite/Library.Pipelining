name: CD

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-dev-[0-9]+'

jobs:
  deploy:
    name: 'Deploy ''${{ github.repository }}'''
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Ensure PackSite NuGet Source Exists & Update
        run: |
          find . -name NuGet.config | while read configfile; do
            if [[ -f "$configfile" ]]; then
              if grep -q '<add key="PackSite"' "$configfile"; then
                echo "Updating NuGet source 'PackSite' in '$configfile'"
                dotnet nuget update source PackSite --configfile "$configfile" -u "${{ secrets.GPR_OWNER }}" -p "${{ secrets.GPR_TOKEN }}" --store-password-in-clear-text
              else
                echo "Adding NuGet source 'PackSite' to '$configfile'"
                dotnet nuget add source "https://nuget.pkg.github.com/${{ secrets.GPR_OWNER }}/index.json" \
                  --name PackSite \
                  --configfile "$configfile" \
                  --username "${{ secrets.GPR_OWNER }}" \
                  --password "${{ secrets.GPR_TOKEN }}" --store-password-in-clear-text
              fi
            else
              echo "No NuGet.config file found."
            fi
          done
    
      - name: Pack
        run: |
          OUTPUT_DIR="output-packages"
          mkdir -p "$OUTPUT_DIR"
          find . -name "*.sln" | while read slnfile; do
            if [[ -f "$slnfile" ]]; then
              echo "Building and packing $slnfile"
              dotnet pack "$slnfile" --configuration Release --output "$OUTPUT_DIR"
            else
              echo "No solution file found."
            fi
          done

      - name: Push NuGet packages to GitHub Packages
        run: |
          OUTPUT_DIR="output-packages"
          OWNER_NAME="${{ github.repository_owner }}"  # e.g., PackSite
          REPO_NAME="${{ github.event.repository.name }}"  # e.g., Library.Validation
          PACKAGE_PATTERN="${OWNER_NAME}.${REPO_NAME}.*"  # Match pattern: PackSite.Library.Validation.*

          for pkg in "$OUTPUT_DIR"/*.nupkg; do
            PKG_NAME=$(basename "$pkg") # Extract package filename

            # Match package name using pattern OWNER_NAME.REPO_NAME.*
            if [[ "$PKG_NAME" == $PACKAGE_PATTERN* ]]; then
              echo "✅ Pushing $PKG_NAME"
              dotnet nuget push "$pkg" --source "https://nuget.pkg.github.com/${OWNER_NAME}/index.json" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate
            else
              echo "❌ Skipping package $PKG_NAME (does not match $PACKAGE_PATTERN)"
            fi
          done
